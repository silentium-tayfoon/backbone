правильный html для индекс файла чтобы работал манифест!
<html manifest="/public/offline.manifest">

чтобы увидеть изменения - нужно пересобрать БАНДЛ!!!
npm run prod
и отключить или изменить манифест!

mongodb start demon

# MONGO DB - to start mong database just run in console: mongod

https://docs.mongodb.com/manual/tutorial/manage-mongodb-processes/
# mongod

start server:# node server.js
path: http://localhost:8080/

GIT 
	ignore local folder - go to .git/info/ open exclude end add a folder 'node_modules/'
	so in that way yout modules will not be in the git;

1) завести пользователя, сохранить, редактировать.
	использовать: 
		backbone
		handlebars

1.1) подцепить handlebars для view
	лень колупать оригинальный handlebars, подключить Димин на стероидах!
	handlebars не нужен

1.2) генерация темплейта а также навешивание ивентов на сгенеренную часть

1.3) добавить в форму все элементы которые приходится использовать - радио кнопки, чек боксы, скрытые ....
	сделаю все это на underscore темплейте 

1.3.1) А слона и не заметили! Сохранение введенных данных с формы, валидация, сохранение на сервер!
	сделать форму отдельным модулем!

1.3.2) В вьюхе автоматом собирать данные со всех полей что перечисленны в деф (а что делать если поле с деф не подходит или нужно еще несколько добавить? механизм?)
	
!!! 1.4) валидация введенных данных

1.5) генерация country на select2 

+ 1.6) Работа с коллекциями (вывод всех пользователей) 

! 1.6.1) реакция кнопки, и неактивность пока выполнится действие!

1.7) добавление пользователя, редактирование пользователя

+ 1.8) RESTFULL API - взаимодействие с сервером!

+ 1.9) API - переписать все на post запросы, и формировать ответы с ошибками или удачным выполнением

+ 1.9.1) webpack - нужно склеить js и template  

2) все тоже самое но исползовать: polymer	

2.1) организация файловой структуры

3) взаимодействие модулей, 2 и более. Через общую шину. Организация последовательного выполнения - promise


Основные проблемы которые нужно решить:
	
	1) структура данных, хранение состояний и валидация введенных данных
		- backbone

	2) зоопарк ивентов, всех под одну гребенку!
		- backbone

	3) проблема с перерисовкой блоков
		- handlebars vs polymer (native templates, можно ли нативные подшаманить под сигму? А надо ли? Послать сигму лесом!)

	4) проблема с инкапсуляцией отдельныx элементов и модулей
		- polymer (проверить на кроссбраузерность) vs свой велосипед

	5) общая проблема инкапсуляции - может не быть нужного dom в то время как скрипт обращается, 
		или наоборот, присутствует дом для которого нету скрипта

	6) никому нельзя доверять - может измениться как темплейт так и данные с сервера,
		и то и то приходиться проверять. 
		Методы автоматической проверки?
		+ для шаблонов - просто делаем структуры классов которые должны быть, а расположение уже не важно

	7) минимальные автотесты - (максимально быстрая проверка, проблема в фронт или бек)
		- проверка данных с сервера, допустимые пределы, + в коментариях вариант правильных значений
		- запуск скрипта с валидными данными для эмуляции работы и проверки

	8) контроль состояния с помощью автотестов и https://github.com/gemini-testing/gemini

	9) ajax - контроль состояния и количества запусков для одного "модуля" 
		- написать один класс для аджакса, для каждого "модуля" будет свой обьект аджакса
		class ajax  - проверка на redirect, если есть то тут же перенаправлять
					- общая обработка ошибок, задать параметры для бека
					?- глобальный список где видно количество аджаксов и с каких модулей они запускались

	10) навес событий после генерации и регенерации блока
		- onclick в domе
		- делегация на body
		- ре инит событий после генерации скриптом

	11) версионность - для svn, чтобы было сразу понятно что работаем с актуальным кодом
		можно ли автоматизировать? 
			плагин для webStorm? (автоматическая запись при сохранении)
			функция для вывода в консоль списка файлов и версий хранящихся в браузере и показывающего разницу?

	12) сжатие и упаковка скриптов
		взять все подключаемые фреймворки (типсы, попапы, селекты и прочее), ужать и подключать одним файлом

	13) определение браузера и устройства, локации, языка и прочего - по возможности все определять на беке,
		а на фронт отдавать переменную с данным, 
		аля 
			Global.browser = {
				is_touch_device (isTouchDevice): (определяется в броузере, на бек не выйдет),
				is_mobile: регулярка, на бек,
				name (browser_info): определение браузера, бек
			}

	14) фиксы для браузеров вынести в отдельный файл, ужатую версию добавить к фреймовикам


