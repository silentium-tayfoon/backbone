

//МОДЕЛИ

	//создание класа
		var Todo = Backbone.Model.extend({
			//значения по умолчанию
			defaults: {
				title: 'no title',
				completed: false
			},
			//инициализация, как правило сюда навешиваются ивенты на изменения данных и валидация
			initialize: function(){
	        	console.log('This model has been initialized.');

	        	this.on('change', function(){
					if(this.hasChanged('first_name')){
						console.log('first_name - changed');
						//тут же можно вызвать рендер данных,
						changeUserView();
					}
				});

				this.on("invalid", function(model, error){
					console.log(error);
				});
	 		}
		});

	//создание рабочего обьекта
		var todo_list = new Todo({
			title: 'some title'
		});

	//перевести в строку и показать модель
		console.log(todo_list.toJSON());
	//или так перевести в строку
		JSON.stringify(todo_list);

	//взять значение из модели
		todo_list.get('title'); // 'some title'

	//записать значение
		todo_list.set({title:'some new value'});

	//записать значение в обход set() а значит не сработают ивенты
	//прямой доступ через свойство attributes
		todo_list.attributes.title = 'some value';

	// прямая запись без триггера событий
		todo_list.set({title:'some new value', {silent: true}});

	//валидация значений
		1) происходит автоматически при вызове todo_list.save()
		2) или если в set() передать параметр  {validate:true}
			todo_list.set('title', 'asf123', {validate:true});
	//+ добавить обьявление при создании класса
		validate: function(some_attributes){
	       		if(some_attributes.hasOwnProperty('first_name')){
	       			// тут делаем что угодно
	       		}
	       	}

	//удаление атрибута 
		todo_list.unset('title');

//ПРЕДСТАВЛЕНИЯ - ВЬЮХИ
	
	//
	var TodoView = Backbone.View.extend({
		//ключевой элемент - хранит ссылку на дом дерево, или создает елемент с нуля! как тут.
		tagName: 'li',
		className: 'container', // необязательное свойство; можно присваивать ему
                            	// несколько классов, например 'container homepage'
    	id: 'todos', 			// необязательное свойство
		// Кэширование функции шаблона для отдельного элемента.
		todoTpl: _.template( "An example template" ),
		events: {
		 'dblclick label': 'edit',
		 'keypress .edit': 'updateOnEnter',
		 'blur .edit': 'close'
		},
		// Повторное отображение заголовка задачи.
		 render: function() {
		 this.$el.html( this.todoTpl( this.model.toJSON() ) );
		 this.input = this.$('.edit');
		 return this;
		},
		edit: function() {
		 // выполняется при двойном щелчке по задаче
		},
		close: function() {
		 // выполняется, когда задача теряет фокус
		},
		updateOnEnter: function( e ) {
		 // выполняется при каждом нажатии клавиши в режиме редактирования задачи,
		 // но мы будем ждать нажатия enter, чтобы попасть в действие
		}
	 });
	 var todoView = new TodoView();
	 // помещаем в журнал ссылку на DOM-элемент,
	 // соответствующий экземпляру представления
	 console.log(todoView.el); // в журнале: <li></li>

	 // setElement - для переиспользования готового view, на другом дом обьекте - при этом
	 // все события со старого удалит, а на новый повесит
		// применение к элементу button1
		var view = new View({el: button1});
		// Применение представления к элементу button2 с помощью метода setElement
		view.setElement(button2);
		button1.trigger('click');
		button2.trigger('click'); // возвращает true


	//view не покажет готовый елемент - нужно делать руками
		var view = new Backbone.View;
		view.setElement('<p><a><b>test</b></a></p>');
		view.$('a b').html(); // выводит "test"

	// underscore template()
	/*
		если нету переменной в шаблоне, а ее может и не быть, то выбрасывает ошибку!
		есть 2 пути решения
		1) в модели задать defaults, например пустую строку
		2) когда скармливаем модель шаблонизатору, то ее нужно обернуть в обьект

	*/	
		render: function(){
				this.$el.html(this.template({d:this.model.attributes}));
				return this;
			}
	// и потом в шаблоне обращаемся через атрибут обьекта d
		First name : <%= d.first_name %>		


//КОЛЛЕКЦИИ
	// создание коллекции
		var Todo = Backbone.Model.extend({
			defaults: {
				title: '',
				completed: false
			}
		});
		var TodosCollection = Backbone.Collection.extend({
			model: Todo
		});
		var myTodo = new Todo({title:'Read the whole book', id: 2});
		// передача массива моделей при создании экземпляра коллекции
		var todos = new TodosCollection([myTodo]);
		console.log("Collecti`on size: " + todos.length); // Collection size: 1

	// добавление, удаление, полная перезапись из коллекции
	// Обратите внимание, что при использовании метода Collection.reset() события add и remove не генерируются, вместо них генерируется событие reset.
		Collection.add(), 
		Collection.remove(), 
		Collection.reset()

		todos.add(myTodo); 
		todos.remove(myTodo);
		todos.reset([
		    { title: 'go to Cuba.', completed: false }
		]);
		// Для удобства при использовании "reset" список моделей, находившихся в коллекции, доступны как options.previousModels.	

	// можно так же добавлять или удалять массивы моделей
		todos.add([myTodo, myTodo2]);

	// считывание моделей Collection.get()  - id, cid, idAttribute
		todos.get(id / cid / idAttribute)
		/*
			id - уникальный идентификатор
			cid - клиентский идентификатор, генерируется библиотекой автоматически, можно использовать если нету id и модель не сохраняется в базе
			idAttribute - преобразователь, если в базе храниться модель и ее идентификатор 'user_id' то его можно задать как id для Backbone модели, то есть сделать маппинг
		*/
		var Meal = Backbone.Model.extend({
		  idAttribute: "_id"
		});

		var cake = new Meal({ _id: 1, name: "Пирожок" });
		alert("id пирожка: " + cake.id);

	// слушаем события коллекции - add, remove

		var TodosCollection = new Backbone.Collection();

 			TodosCollection.on("add", function(todo) {
     			console.log('Collection was changed with title = '+ todo.get("title"));
			});

			TodosCollection.add([
			    { title: 'go to Jamaica', completed: false }
			    { title: 'go to Disneyland', completed: true }
		    ]);

	// можно отследить любые изменения моделей в коллекции change

		TodosCollection.on("change:title", function(model) {
		    console.log("Changed my mind! I should " + model.get('title'));
		});

	// Можно также использовать таблицы событий вида obj.on({click: action}) в стиле jQuery.
	
		myTodo.on({
			'change:title' : titleChanged,
			'change:completed' : stateChanged
		});
		function titleChanged(){
			console.log('The title was changed!');
		}			

	// Backbone.Events.once() - События Backbone также поддерживают метод once(), который гарантирует, что обратный вызов при получении уведомления сработает только один раз
	// Backbone.Events - использование ивентов БЕЗ модели!

		// Определение объекта с двумя счетчиками

			var TodoCounter = { counterA: 0, counterB: 0 };

		// добавление в Backbone.Events

			_.extend(TodoCounter, Backbone.Events);

		// инкрементирование счетчика counterA, генерация события

			var incrA = function(){
				TodoCounter.counterA += 1;
				TodoCounter.trigger('event');
			};

		// инкрементирование счетчика counterB

			var incrB = function(){
				TodoCounter.counterB += 1;
			};

		// использование once вместо явного отключения нашего слушателя событий

			TodoCounter.once('event', incrA);
			TodoCounter.once('event', incrB);

		// генерация еще одного события

			TodoCounter.trigger('event');

		// проверка вывода

		console.log(TodoCounter.counterA === 1); // true
		console.log(TodoCounter.counterB === 1); // true

		// Инкрементирование счетчиков counterA и counterB должно было произойти только один раз.

	// Collection.update()
		/*
		Метод update() доступен для коллекций (а также доступен в качестве параметра для выборки) и обеспечивает прекрасные возможности обновления наборов моделей. Этот метод обновляет коллекцию, используя заданный список моде- лей. Если модель из списка отсутствует в коллекции, то она добавляется в нее. Если модель уже имеется в коллекции, то атрибуты этой модели добавляются к существующей модели. Модели, присутствующие в коллекции, но отсутству- ющие в списке, удаляются.
		*/

// СОБЫТИЯ - publish/subscribe паттерн, публикация/подписка
	// 
	on() 
	off()
	trigger()


		var ourObject = {};
	// Mixin
		_.extend(ourObject, Backbone.Events);

		function dancing (msg, msg2) { console.log("We are dancing. " + msg + '  -- '+msg2); }

	// Добавление настраиваемого события, подписка
		ourObject.on('dance', dancing);

	// Генерация настраиваемого события
		ourObject.trigger('dance', 'our event');

	// Перехват всех событий - триггеров
		ourObject.on("all", function(eventName){
			console.log("The name of the event passed was " + eventName);
		});

	// Генерация событий, и передача нескольких параметров 
		ourObject.trigger('run dance jump', 'our event', 'some param 2');

	// Удаление событий, отписка
		ourObject.off("move", dancing);


	// listenTo() и stopListening() - прослушка других обьектов, если есть on, то нужен и off, чтобы не было утечек памяти

		var a = _.extend({}, Backbone.Events);
		var b = _.extend({}, Backbone.Events);
		var c = _.extend({}, Backbone.Events);

		// добавление к объекту A слушателей событий B и C
			a.listenTo(b, 'anything', function(event){
			console.log("anything happened"); });
			a.listenTo(c, 'everything', function(event){
			console.log("everything happened"); });

		// генерация события
			b.trigger('anything'); // в журнал: anything happened

		// прекращение прослушивания
			a.stopListening();

		// A не получает эти события
			b.trigger('anything');
			c.trigger('everything');




// MongoDB

	Start MongoDB - mongostart
	...		      - mongostop 

	http://localhost:28017/


// _.extend
// можно расширять классы как угодно
	/*
		1. Проверяется наличие конструктора среди методов экземпляра. Если кон- структор существует, то он вызывается; в противном случае вызывается конструктор родительского класса (например, Backbone.Model).
		2. Вызывается метод extend библиотеки Underscore для добавления методов родительского класса в новый дочерний класс.
		3. Прототип родительского класса присваивается свойству prototype пустой функции-конструктора, а значение свойства prototype дочернего класса — новому экземпляру указателя this.
		4. Метод extend библиотеки Underscore дважды вызывается для добавления в дочерний класс статических методов и методов экземпляра.
		5. Задается конструктор прототипа дочернего класса и свойство __super__.
	*/

	var MyMixin = {
	     foo: 'bar',
	     sayFoo: function(){alert(this.foo);}
	 };
	 var MyView = Backbone.View.extend({
	// ... });
	 _.extend(MyView.prototype, MyMixin);
	 var myView = new MyView();
	 myView.sayFoo(); //=> 'bar'

// ----------------------------------------------------------------------------------------------------

Работа с Backbone.localStorage для коллекций - проблема, у коллекции нету функции Collection.save()
чтобы можно было сохранить все модели в коллекции в localStorage. Поетому нужно добавить функцию которая
по событию collection.on('add', save_to_localStorage)

	на примере это выглядит вот так

	var NameServersCollection = Backbone.Collection.extend({
			//OFFLINE: step 2
			localStorage: new Backbone.LocalStorage(LOCAL_STORAGE_NameServers),
			url: '/reseller/ajax/reseller/update_nameservers/',
			model: NameServersModel,
			save_to_localStorage: function(model){
				model.save();
				// put model.id - key in localStorage
				// to the records for the collection.fetch() works in right way
				this.localStorage.records.push(model.id);
			},
			initialize: function () {
				this.on('add', function () {
					this.models.map(this.save_to_localStorage, this);
				});
			}
		});

	и в результате у нас нормально будет отрабатывать collection.fetch()
// ----------------------------------------------------------------------------------------------------




career.luxoft.com/r/?vr=VR-22918&location=Kiev






<div>
    <%
        for (let i=0; i<name_server_view.collection.models.length; i++) {
        let model_data = name_server_view.collection.models[i].attributes;
    %>
        <div class="row table-group _middle name-servers">
            <div class="table-cell col-xl-6 col-m-auto _m-order-1"><%= model_data.title %>:</div>
            <div class="table-cell col-xl-8 col-m-24 _m-order-3">
                <input name="name_<%= i %>" type="text" value="<%= model_data.name %>" class="_full-width hostName">
            </div>
            <div class="table-cell col-xl-auto col-m-24 _m-clear _m-order-4">
                <input name="ip_<%= i %>" type="text" value="<%= model_data.ip %>" class="_full-width ipAddress _m-mt10">
            </div>
            <div class="table-cell col-xl-fixed _width-60 col-m-12 _m-order-2 _align-right delete_number_<%= i %> delete_ns_record_js"><span class="inline-link _font11 _uppercase">Delete</span></div>
        </div>
    <%
        }
    %>
</div>


















































































































































